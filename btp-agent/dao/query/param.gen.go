// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"btp-agent/dao/model"
)

func newParam(db *gorm.DB, opts ...gen.DOOption) param {
	_param := param{}

	_param.paramDo.UseDB(db, opts...)
	_param.paramDo.UseModel(&model.Param{})

	tableName := _param.paramDo.TableName()
	_param.ALL = field.NewAsterisk(tableName)
	_param.ID = field.NewInt32(tableName, "id")
	_param.K = field.NewString(tableName, "k")
	_param.V1 = field.NewString(tableName, "v1")
	_param.V2 = field.NewString(tableName, "v2")
	_param.V3 = field.NewString(tableName, "v3")
	_param.V4 = field.NewString(tableName, "v4")
	_param.V5 = field.NewString(tableName, "v5")
	_param.V6 = field.NewString(tableName, "v6")
	_param.Remark = field.NewString(tableName, "remark")

	_param.fillFieldMap()

	return _param
}

type param struct {
	paramDo

	ALL    field.Asterisk
	ID     field.Int32
	K      field.String
	V1     field.String
	V2     field.String
	V3     field.String
	V4     field.String
	V5     field.String
	V6     field.String
	Remark field.String

	fieldMap map[string]field.Expr
}

func (p param) Table(newTableName string) *param {
	p.paramDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p param) As(alias string) *param {
	p.paramDo.DO = *(p.paramDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *param) updateTableName(table string) *param {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.K = field.NewString(table, "k")
	p.V1 = field.NewString(table, "v1")
	p.V2 = field.NewString(table, "v2")
	p.V3 = field.NewString(table, "v3")
	p.V4 = field.NewString(table, "v4")
	p.V5 = field.NewString(table, "v5")
	p.V6 = field.NewString(table, "v6")
	p.Remark = field.NewString(table, "remark")

	p.fillFieldMap()

	return p
}

func (p *param) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *param) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["k"] = p.K
	p.fieldMap["v1"] = p.V1
	p.fieldMap["v2"] = p.V2
	p.fieldMap["v3"] = p.V3
	p.fieldMap["v4"] = p.V4
	p.fieldMap["v5"] = p.V5
	p.fieldMap["v6"] = p.V6
	p.fieldMap["remark"] = p.Remark
}

func (p param) clone(db *gorm.DB) param {
	p.paramDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p param) replaceDB(db *gorm.DB) param {
	p.paramDo.ReplaceDB(db)
	return p
}

type paramDo struct{ gen.DO }

type IParamDo interface {
	gen.SubQuery
	Debug() IParamDo
	WithContext(ctx context.Context) IParamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IParamDo
	WriteDB() IParamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IParamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IParamDo
	Not(conds ...gen.Condition) IParamDo
	Or(conds ...gen.Condition) IParamDo
	Select(conds ...field.Expr) IParamDo
	Where(conds ...gen.Condition) IParamDo
	Order(conds ...field.Expr) IParamDo
	Distinct(cols ...field.Expr) IParamDo
	Omit(cols ...field.Expr) IParamDo
	Join(table schema.Tabler, on ...field.Expr) IParamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IParamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IParamDo
	Group(cols ...field.Expr) IParamDo
	Having(conds ...gen.Condition) IParamDo
	Limit(limit int) IParamDo
	Offset(offset int) IParamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IParamDo
	Unscoped() IParamDo
	Create(values ...*model.Param) error
	CreateInBatches(values []*model.Param, batchSize int) error
	Save(values ...*model.Param) error
	First() (*model.Param, error)
	Take() (*model.Param, error)
	Last() (*model.Param, error)
	Find() ([]*model.Param, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Param, err error)
	FindInBatches(result *[]*model.Param, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Param) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IParamDo
	Assign(attrs ...field.AssignExpr) IParamDo
	Joins(fields ...field.RelationField) IParamDo
	Preload(fields ...field.RelationField) IParamDo
	FirstOrInit() (*model.Param, error)
	FirstOrCreate() (*model.Param, error)
	FindByPage(offset int, limit int) (result []*model.Param, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IParamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paramDo) Debug() IParamDo {
	return p.withDO(p.DO.Debug())
}

func (p paramDo) WithContext(ctx context.Context) IParamDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paramDo) ReadDB() IParamDo {
	return p.Clauses(dbresolver.Read)
}

func (p paramDo) WriteDB() IParamDo {
	return p.Clauses(dbresolver.Write)
}

func (p paramDo) Session(config *gorm.Session) IParamDo {
	return p.withDO(p.DO.Session(config))
}

func (p paramDo) Clauses(conds ...clause.Expression) IParamDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paramDo) Returning(value interface{}, columns ...string) IParamDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paramDo) Not(conds ...gen.Condition) IParamDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paramDo) Or(conds ...gen.Condition) IParamDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paramDo) Select(conds ...field.Expr) IParamDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paramDo) Where(conds ...gen.Condition) IParamDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paramDo) Order(conds ...field.Expr) IParamDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paramDo) Distinct(cols ...field.Expr) IParamDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paramDo) Omit(cols ...field.Expr) IParamDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paramDo) Join(table schema.Tabler, on ...field.Expr) IParamDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paramDo) LeftJoin(table schema.Tabler, on ...field.Expr) IParamDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paramDo) RightJoin(table schema.Tabler, on ...field.Expr) IParamDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paramDo) Group(cols ...field.Expr) IParamDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paramDo) Having(conds ...gen.Condition) IParamDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paramDo) Limit(limit int) IParamDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paramDo) Offset(offset int) IParamDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paramDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IParamDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paramDo) Unscoped() IParamDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paramDo) Create(values ...*model.Param) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paramDo) CreateInBatches(values []*model.Param, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paramDo) Save(values ...*model.Param) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paramDo) First() (*model.Param, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Param), nil
	}
}

func (p paramDo) Take() (*model.Param, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Param), nil
	}
}

func (p paramDo) Last() (*model.Param, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Param), nil
	}
}

func (p paramDo) Find() ([]*model.Param, error) {
	result, err := p.DO.Find()
	return result.([]*model.Param), err
}

func (p paramDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Param, err error) {
	buf := make([]*model.Param, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paramDo) FindInBatches(result *[]*model.Param, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paramDo) Attrs(attrs ...field.AssignExpr) IParamDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paramDo) Assign(attrs ...field.AssignExpr) IParamDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paramDo) Joins(fields ...field.RelationField) IParamDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paramDo) Preload(fields ...field.RelationField) IParamDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paramDo) FirstOrInit() (*model.Param, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Param), nil
	}
}

func (p paramDo) FirstOrCreate() (*model.Param, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Param), nil
	}
}

func (p paramDo) FindByPage(offset int, limit int) (result []*model.Param, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paramDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paramDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paramDo) Delete(models ...*model.Param) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paramDo) withDO(do gen.Dao) *paramDo {
	p.DO = *do.(*gen.DO)
	return p
}
