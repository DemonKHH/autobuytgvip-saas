// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buyaobilian1/autobuytgvip-saas/btp-agent/dao/model"
)

func newWithdraw(db *gorm.DB, opts ...gen.DOOption) withdraw {
	_withdraw := withdraw{}

	_withdraw.withdrawDo.UseDB(db, opts...)
	_withdraw.withdrawDo.UseModel(&model.Withdraw{})

	tableName := _withdraw.withdrawDo.TableName()
	_withdraw.ALL = field.NewAsterisk(tableName)
	_withdraw.ID = field.NewInt32(tableName, "id")
	_withdraw.UserID = field.NewInt32(tableName, "user_id")
	_withdraw.TgID = field.NewInt64(tableName, "tg_id")
	_withdraw.OrderNo = field.NewString(tableName, "order_no")
	_withdraw.Amount = field.NewFloat64(tableName, "amount")
	_withdraw.TronAddr = field.NewString(tableName, "tron_addr")
	_withdraw.Status = field.NewInt32(tableName, "status")
	_withdraw.CreatedAt = field.NewTime(tableName, "created_at")

	_withdraw.fillFieldMap()

	return _withdraw
}

type withdraw struct {
	withdrawDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32
	TgID      field.Int64
	OrderNo   field.String
	Amount    field.Float64
	TronAddr  field.String
	Status    field.Int32
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (w withdraw) Table(newTableName string) *withdraw {
	w.withdrawDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w withdraw) As(alias string) *withdraw {
	w.withdrawDo.DO = *(w.withdrawDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *withdraw) updateTableName(table string) *withdraw {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.UserID = field.NewInt32(table, "user_id")
	w.TgID = field.NewInt64(table, "tg_id")
	w.OrderNo = field.NewString(table, "order_no")
	w.Amount = field.NewFloat64(table, "amount")
	w.TronAddr = field.NewString(table, "tron_addr")
	w.Status = field.NewInt32(table, "status")
	w.CreatedAt = field.NewTime(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *withdraw) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *withdraw) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["tg_id"] = w.TgID
	w.fieldMap["order_no"] = w.OrderNo
	w.fieldMap["amount"] = w.Amount
	w.fieldMap["tron_addr"] = w.TronAddr
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
}

func (w withdraw) clone(db *gorm.DB) withdraw {
	w.withdrawDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w withdraw) replaceDB(db *gorm.DB) withdraw {
	w.withdrawDo.ReplaceDB(db)
	return w
}

type withdrawDo struct{ gen.DO }

type IWithdrawDo interface {
	gen.SubQuery
	Debug() IWithdrawDo
	WithContext(ctx context.Context) IWithdrawDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWithdrawDo
	WriteDB() IWithdrawDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWithdrawDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWithdrawDo
	Not(conds ...gen.Condition) IWithdrawDo
	Or(conds ...gen.Condition) IWithdrawDo
	Select(conds ...field.Expr) IWithdrawDo
	Where(conds ...gen.Condition) IWithdrawDo
	Order(conds ...field.Expr) IWithdrawDo
	Distinct(cols ...field.Expr) IWithdrawDo
	Omit(cols ...field.Expr) IWithdrawDo
	Join(table schema.Tabler, on ...field.Expr) IWithdrawDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawDo
	Group(cols ...field.Expr) IWithdrawDo
	Having(conds ...gen.Condition) IWithdrawDo
	Limit(limit int) IWithdrawDo
	Offset(offset int) IWithdrawDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawDo
	Unscoped() IWithdrawDo
	Create(values ...*model.Withdraw) error
	CreateInBatches(values []*model.Withdraw, batchSize int) error
	Save(values ...*model.Withdraw) error
	First() (*model.Withdraw, error)
	Take() (*model.Withdraw, error)
	Last() (*model.Withdraw, error)
	Find() ([]*model.Withdraw, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Withdraw, err error)
	FindInBatches(result *[]*model.Withdraw, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Withdraw) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWithdrawDo
	Assign(attrs ...field.AssignExpr) IWithdrawDo
	Joins(fields ...field.RelationField) IWithdrawDo
	Preload(fields ...field.RelationField) IWithdrawDo
	FirstOrInit() (*model.Withdraw, error)
	FirstOrCreate() (*model.Withdraw, error)
	FindByPage(offset int, limit int) (result []*model.Withdraw, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWithdrawDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w withdrawDo) Debug() IWithdrawDo {
	return w.withDO(w.DO.Debug())
}

func (w withdrawDo) WithContext(ctx context.Context) IWithdrawDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w withdrawDo) ReadDB() IWithdrawDo {
	return w.Clauses(dbresolver.Read)
}

func (w withdrawDo) WriteDB() IWithdrawDo {
	return w.Clauses(dbresolver.Write)
}

func (w withdrawDo) Session(config *gorm.Session) IWithdrawDo {
	return w.withDO(w.DO.Session(config))
}

func (w withdrawDo) Clauses(conds ...clause.Expression) IWithdrawDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w withdrawDo) Returning(value interface{}, columns ...string) IWithdrawDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w withdrawDo) Not(conds ...gen.Condition) IWithdrawDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w withdrawDo) Or(conds ...gen.Condition) IWithdrawDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w withdrawDo) Select(conds ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w withdrawDo) Where(conds ...gen.Condition) IWithdrawDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w withdrawDo) Order(conds ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w withdrawDo) Distinct(cols ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w withdrawDo) Omit(cols ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w withdrawDo) Join(table schema.Tabler, on ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w withdrawDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w withdrawDo) RightJoin(table schema.Tabler, on ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w withdrawDo) Group(cols ...field.Expr) IWithdrawDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w withdrawDo) Having(conds ...gen.Condition) IWithdrawDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w withdrawDo) Limit(limit int) IWithdrawDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w withdrawDo) Offset(offset int) IWithdrawDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w withdrawDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWithdrawDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w withdrawDo) Unscoped() IWithdrawDo {
	return w.withDO(w.DO.Unscoped())
}

func (w withdrawDo) Create(values ...*model.Withdraw) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w withdrawDo) CreateInBatches(values []*model.Withdraw, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w withdrawDo) Save(values ...*model.Withdraw) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w withdrawDo) First() (*model.Withdraw, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Withdraw), nil
	}
}

func (w withdrawDo) Take() (*model.Withdraw, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Withdraw), nil
	}
}

func (w withdrawDo) Last() (*model.Withdraw, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Withdraw), nil
	}
}

func (w withdrawDo) Find() ([]*model.Withdraw, error) {
	result, err := w.DO.Find()
	return result.([]*model.Withdraw), err
}

func (w withdrawDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Withdraw, err error) {
	buf := make([]*model.Withdraw, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w withdrawDo) FindInBatches(result *[]*model.Withdraw, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w withdrawDo) Attrs(attrs ...field.AssignExpr) IWithdrawDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w withdrawDo) Assign(attrs ...field.AssignExpr) IWithdrawDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w withdrawDo) Joins(fields ...field.RelationField) IWithdrawDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w withdrawDo) Preload(fields ...field.RelationField) IWithdrawDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w withdrawDo) FirstOrInit() (*model.Withdraw, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Withdraw), nil
	}
}

func (w withdrawDo) FirstOrCreate() (*model.Withdraw, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Withdraw), nil
	}
}

func (w withdrawDo) FindByPage(offset int, limit int) (result []*model.Withdraw, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w withdrawDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w withdrawDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w withdrawDo) Delete(models ...*model.Withdraw) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *withdrawDo) withDO(do gen.Dao) *withdrawDo {
	w.DO = *do.(*gen.DO)
	return w
}
